
 



 
 
 



 
 
 <!DOCTYPE html>
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" >
 <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" >
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link rel="icon" type="image/vnd.microsoft.icon" href="https://ssl.gstatic.com/codesite/ph/images/phosting.ico">
 
 
 <link rel="canonical" href="https://code.google.com/p/picoc/wiki/Adding_native_C_library_functions" />
 
 <script type="text/javascript">
 
 
 
 
 var codesite_token = "ABZ6GAefUPI7sTx9MnPjHjqyk6-n_x2YaQ:1439298647272";
 
 
 var CS_env = {"token": "ABZ6GAefUPI7sTx9MnPjHjqyk6-n_x2YaQ:1439298647272", "assetVersionPath": "https://ssl.gstatic.com/codesite/ph/9967404889048465354", "projectName": "picoc", "projectHomeUrl": "/p/picoc", "profileUrl": "/u/105083986792207142090/", "domainName": null, "loggedInUserEmail": "google@LoadAccumulator.com", "relativeBaseUrl": "", "assetHostPath": "https://ssl.gstatic.com/codesite/ph"};
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 
 </script>
 
 
 <title>Adding_native_C_library_functions - 
 picoc -
 
 Adding native C library functions - 
 A very small C interpreter - Google Project Hosting
 </title>
 <link type="text/css" rel="stylesheet" href="https://ssl.gstatic.com/codesite/ph/9967404889048465354/css/core.css">
 
 <link type="text/css" rel="stylesheet" href="https://ssl.gstatic.com/codesite/ph/9967404889048465354/css/ph_detail.css" >
 
 
 
 <link type="application/atom+xml" rel="alternate" href="/feeds/p/picoc/svnchanges/basic?path=/wiki/Adding_native_C_library_functions.wiki">
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="https://ssl.gstatic.com/codesite/ph/9967404889048465354/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(https://ssl.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(https://ssl.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(https://ssl.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 
 
 #maincol {
 padding-top: 0;
 padding-bottom: 0;
 }

 
 </style>
</head>
<body class="t6">
<script type="text/javascript">
 window.___gcfg = {lang: 'en'};
 (function() 
 {var po = document.createElement("script");
 po.type = "text/javascript"; po.async = true;po.src = "https://apis.google.com/js/plusone.js";
 var s = document.getElementsByTagName("script")[0];
 s.parentNode.insertBefore(po, s);
 })();
</script>
<div class="headbg">

 <div id="gaia">
 

 <span>
 
 
 
 <a href="#" id="multilogin-dropdown" onclick="return false;"
 ><u><b>google@LoadAccumulator.com</b></u> <small>&#9660;</small></a>
 
 
 | <a href="/u/105083986792207142090/" id="projects-dropdown" onclick="return false;"
 ><u>My favorites</u> <small>&#9660;</small></a>
 | <a href="/u/105083986792207142090/" onclick="_CS_click('/gb/ph/profile');"
 title="Profile, Updates, and Settings"
 ><u>Profile</u></a>
 | <a href="https://www.google.com/accounts/Logout?continue=https%3A%2F%2Fcode.google.com%2Fp%2Fpicoc%2Fwiki%2FAdding_native_C_library_functions" 
 onclick="_CS_click('/gb/ph/signout');"
 ><u>Sign out</u></a>
 
 </span>

 </div>

 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px"></div>
<!--[if lte IE 7]>
<div style="text-align:center;">
Your version of Internet Explorer is not supported. Try a browser that
contributes to open source, such as <a href="http://www.firefox.com">Firefox</a>,
<a href="http://www.google.com/chrome">Google Chrome</a>, or
<a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a>.
</div>
<![endif]-->

 <div style="font-weight:bold; color:#a03; padding:5px; margin-top:10px; text-align:center; background:#ffeac0;">
 Google Code will be turning read-only on August 25th. See <a href='https://code.google.com/p/support/wiki/ReadOnlyTransition'>this post</a> for more information.
 
 </div>



 <table style="padding:0px; margin: 0px 0px 10px 0px; width:100%" cellpadding="0" cellspacing="0"
 itemscope itemtype="http://schema.org/CreativeWork">
 <tr style="height: 58px;">
 
 
 
 <td id="plogo">
 <link itemprop="url" href="/p/picoc">
 <a href="/p/picoc/">
 
 <img src="https://ssl.gstatic.com/codesite/ph/images/defaultlogo.png" alt="Logo" itemprop="image">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em">
 
 <div id="pname">
 <a href="/p/picoc/"><span itemprop="name">picoc</span></a>
 </div>
 
 <div id="psum">
 <a id="project_summary_link"
 href="/p/picoc/"><span itemprop="description">A very small C interpreter</span></a>
 
 </div>
 
 
 </td>
 <td style="white-space:nowrap;text-align:right; vertical-align:bottom;">
 
 <form action="/hosting/search">
 <input size="30" name="q" value="" type="text">
 
 <input type="submit" name="projectsearch" value="Search projects" >
 </form>
 
 </tr>
 </table>

</div>

 
<div id="mt" class="gtb"> 
 <a href="/p/picoc/" class="tab ">Project&nbsp;Home</a>
 
 
 
 
 <a href="/p/picoc/downloads/list" class="tab ">Downloads</a>
 
 
 
 
 
 <a href="/p/picoc/w/list" class="tab active">Wiki</a>
 
 
 
 
 
 <a href="/p/picoc/issues/list"
 class="tab ">Issues</a>
 
 
 
 
 
 <a href="/p/picoc/source/checkout"
 class="tab ">Source</a>
 
 
 
 
 
 
 
 
 <a href="https://code.google.com/export-to-github/export?project=picoc">
 <button>Export to GitHub</button>
 
 </a>
 
 
 
 
 
 <div class=gtbc></div>
</div>
<table cellspacing="0" cellpadding="0" width="100%" align="center" border="0" class="st">
 <tr>
 
 
 
 <td class="subt">
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="/p/picoc/w/list" method="GET" style="display:inline">
 <select id="can" name="can" >
 <option disabled="disabled">Search within:</option>
 
 <option value="1" >&nbsp;All wiki pages</option>
 <option value="3" >&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="5" >&nbsp;My starred pages</option>
 
 <option value="4" >&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <span id="qq"><input type="text" size="38" id="searchq" name="q" value=""
 autocomplete="off" ></span>
 
 
 
 <input type="submit" value="Search" >
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 <td align="right" valign="top" class="bevel-right"></td>
 </tr>
</table>


<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>
<div id="maincol"
 
>

 







 <style type="text/css">
 .delcom { background: #e8e8e8 }
 .commentcontent {
 margin: 2em;
 padding: 0px 10px;
 width: 66em;
 }
 .artifactcomment {
 border-top: 3px solid #c3d9ff;
 }
 #commentform {
 border-top: 3px solid #c3d9ff;
 }
 </style>

<div id="wikipage">
<table>
 <tr>
 
 
 <td style="vertical-align:top; padding-left:5px">
 
 <div id="wikiheader">
 
 <img width="15" height="15" id="star_img"
 src="https://ssl.gstatic.com/codesite/ph/images/star_off.gif"
 style="cursor:pointer"
 onclick="_CS_toggleStar(this,
 {'scope': 'wiki',
 'user': '_CURRENT_USER',
 'item': 'picoc:Adding_native_C_library_functions'
 });"/>
 
 <span style="font-size:120%;font-weight:bold">Adding_native_C_library_functions</span>
 &nbsp;
 <div> 
 
 <i>Adding native C library functions</i>
 
 
 <br/>
 
 <a class="label" style="padding-top: 2px"
 href="/p/picoc/w/list?q=label:User-Library-Creation"
 title=""
 >User-Library-Creation</a>
 
 
 
 <div id="wikiauthor" style="float:right">
 Updated <span title="Fri Mar 15 22:36:48 2013">
 Mar 15, 2013</span>
 
 by 

 <a class="userlink"
 href="/u/116360049618107912297/">zik.sale...@gmail.com</a
>
 
 </div>
 </div>
 </div>
 
 <div id="wikicontent">
 <div class="vt" id="wikimaincol">
 <h1><a name="Introduction"></a>Introduction<a href="#Introduction" class="section_anchor"></a></h1><p>picoc allows you to define your own library functions. These functions are written in C using your system&#x27;s native C compiler. Since the native C compiler can access the hardware this means you can add functions which give picoc control of your hardware. </p><h1><a name="How_libraries_work"></a>How libraries work<a href="#How_libraries_work" class="section_anchor"></a></h1><p>Your picoc distribution contains two files which are used to define library functions for your system. If your system is called &quot;foobar&quot; you&#x27;ll be using: <ul><li><strong>library_foobar.c</strong> - this is where the foobar-specific library functions go </li><li><strong>clibrary.c</strong> - this is where standard C library functions like printf() are defined </li></ul></p><p>We&#x27;ll start by defining a simple function in <strong>library_foobar.c</strong>. We need to do two things: <ul><li>add the function prototype to our list of picoc library functions </li><li>define the native C implementation of the function </li></ul></p><h2><a name="The_prototype_list"></a>The prototype list<a href="#The_prototype_list" class="section_anchor"></a></h2><p>Each of the <strong>library_XXX.c</strong> files defines a list of picoc prototypes for each of the functions it defines. For example: </p><pre class="prettyprint">struct LibraryFunction PlatformLibrary[] =
{
    { ShowComplex,  &quot;void ShowComplex(struct complex *)&quot; },
    { Cpeek,        &quot;int peek(int, int)&quot; },
    { Cpoke,        &quot;void poke(int, int, int)&quot; },
    { Crandom,      &quot;int random(int)&quot; },
    { NULL,         NULL }
};</pre><p>The first column is the name of the C function. The second column is the function prototype. The &quot;{ NULL, NULL }&quot; line at the end is required. </p><h2><a name="The_native_C_function"></a>The native C function<a href="#The_native_C_function" class="section_anchor"></a></h2><p>The native C function is called with these parameters: </p><pre class="prettyprint">void MyCFunc(struct ParseState *Parser, struct Value *ReturnValue, struct Value **Param, int NumArgs);</pre><ul><li><strong>struct ParseState <tt>*</tt>Parser</strong> - this contains internal information about the progress of parsing. It&#x27;s mostly used here so error messages from your function can report the line number where an error occurred. </li><li><strong>struct Value <tt>*</tt>ReturnValue</strong> - this points to the place you can put your return value. This is pre-created as a value of the correct return type so all you have to do is store your result here. </li><li><strong>struct Value <tt>**</tt>Param</strong> - this points to an array of parameters. These are all pre-checked as being the correct type. </li><li><strong>int NumArgs</strong> - this is the number of parameters. Normally this will already have been checked and will be exactly what you&#x27;ve defined in your function prototype. It is however possible to define functions with variable numbers of arguments using a stdarg-like &quot;...&quot; method and this is where you find out how many parameters were passed in if you&#x27;re doing that. </li></ul><p>Here&#x27;s an example function definition of &quot;random&quot; (as defined above): </p><pre class="prettyprint">void Crandom(struct ParseState *Parser, struct Value *ReturnValue, struct Value **Param, int NumArgs)
{
    ReturnValue-&gt;Val-&gt;Integer = random() % Param[0]-&gt;Val-&gt;Integer;
}</pre><p>This function calls &quot;random()&quot; from the C standard library. It accesses an integer parameter and returns an integer value.  </p><h1><a name="Passing_parameters"></a>Passing parameters<a href="#Passing_parameters" class="section_anchor"></a></h1><p>We&#x27;ve seen how to pass integers into functions. What about passing other data types? </p><p><table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Type</strong>   </td><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Method</strong>                   </td><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Comment</strong> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> int      </td><td style="border: 1px solid #ccc; padding: 5px;"> Param<tt>[</tt>x<tt>]</tt>-&gt;Val-&gt;Integer </td><td style="border: 1px solid #ccc; padding: 5px;">           </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> char     </td><td style="border: 1px solid #ccc; padding: 5px;"> Param<tt>[</tt>x<tt>]</tt>-&gt;Val-&gt;Integer </td><td style="border: 1px solid #ccc; padding: 5px;"> Treated as &#x27;int&#x27; here </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> double   </td><td style="border: 1px solid #ccc; padding: 5px;"> Param<tt>[</tt>x<tt>]</tt>-&gt;Val-&gt;FP      </td><td style="border: 1px solid #ccc; padding: 5px;"> Only available on some systems </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> float    </td><td style="border: 1px solid #ccc; padding: 5px;"> Param<tt>[</tt>x<tt>]</tt>-&gt;Val-&gt;FP      </td><td style="border: 1px solid #ccc; padding: 5px;"> Same as &#x27;double&#x27; </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> enum     </td><td style="border: 1px solid #ccc; padding: 5px;"> Param<tt>[</tt>x<tt>]</tt>-&gt;Val-&gt;Integer </td><td style="border: 1px solid #ccc; padding: 5px;"> Gives integer value of enum </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> pointers </td><td style="border: 1px solid #ccc; padding: 5px;"> See section below          </td><td style="border: 1px solid #ccc; padding: 5px;"> Slightly more complicated </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> char <tt>*</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> See section below          </td><td style="border: 1px solid #ccc; padding: 5px;"> Slightly more complicated </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> arrays   </td><td style="border: 1px solid #ccc; padding: 5px;"> See section below          </td><td style="border: 1px solid #ccc; padding: 5px;"> Slightly more complicated </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> struct   </td><td style="border: 1px solid #ccc; padding: 5px;"> See section below          </td><td style="border: 1px solid #ccc; padding: 5px;"> Slightly more complicated </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> union    </td><td style="border: 1px solid #ccc; padding: 5px;"> See section below          </td><td style="border: 1px solid #ccc; padding: 5px;"> Slightly more complicated </td></tr> </table></p><h2><a name="Passing_pointers"></a>Passing pointers<a href="#Passing_pointers" class="section_anchor"></a></h2><p>Pointer parameters are slighty more complicated to access since you have to dereference the pointer to get at the underlying data. </p><p>Here&#x27;s how we dereference a pointer parameter. In this example I&#x27;ll be reading an &#x27;int <tt>*</tt>&#x27; parameter: </p><pre class="prettyprint">    int IntValue = *(int *)Param[0]-&gt;Val-&gt;NativePointer;</pre><h2><a name="Passing_strings_/_char_*"></a>Passing strings / char <tt>*</tt><a href="#Passing_strings_/_char_*" class="section_anchor"></a></h2><p>In this example I&#x27;ll be reading a &#x27;char <tt>*</tt>&#x27; parameter. It&#x27;s pretty similar to the &#x27;int <tt>*</tt>&#x27; example above: </p><pre class="prettyprint">    char *CharPtr = (char *)Param[0]-&gt;Val-&gt;NativePointer;</pre><p>picoc strings work like C strings - they&#x27;re pointers to arrays of characters, terminated by a null character. Once you have the C char <tt>*</tt> you can use it just like a normal C string. </p><p>Pointers to arrays of other data types work the same way. </p><h2><a name="Passing_pointers_to_structures_and_unions"></a>Passing pointers to structures and unions<a href="#Passing_pointers_to_structures_and_unions" class="section_anchor"></a></h2><p>If you&#x27;re defining library functions which take structures as parameters you&#x27;ll have to do a little more work. You need to pre-define the structure so the function prototype can refer to it. </p><p>In <strong>library_XXX.c</strong> you&#x27;ll find a function called PlatformLibraryInit(). This is called before the library prototypes are defined. Here&#x27;s a quick way to define a complex number structure as if it was defined in an include file: </p><pre class="prettyprint">IncludeRegister(&quot;win32.h&quot;, &amp;win32SetupFunc, &amp;win32Functions[0], &quot;struct complex { int i; int j; };&quot;);</pre><p>Or you could just parse the structure directly: </p><pre class="prettyprint">const char *definition = &quot;struct complex { int i; int j; };&quot;;
PicocParse(&quot;my lib&quot;, definition, strlen(definition), TRUE, TRUE, FALSE);</pre><p>The same method works for defining macros too: </p><pre class="prettyprint">const char *definition = &quot;#define ABS(a) ((a) &lt; (0) ? -(a) : (a))&quot;;
PicocParse(&quot;my lib&quot;, definition, strlen(definition), TRUE, TRUE, FALSE);</pre><p>Here&#x27;s a more sophisticated method, using the internal functions of picoc directly: </p><pre class="prettyprint">void PlatformLibraryInit()
{
    struct ParseState Parser;
    char *Identifier;
    struct ValueType *ParsedType;
    void *Tokens;
    char *IntrinsicName = TableStrRegister(&quot;complex library&quot;);
    const char *StructDefinition = &quot;struct complex { int i; int j; }&quot;;
    
    /* define an example structure */
    Tokens = LexAnalyse(IntrinsicName, StructDefinition, strlen(StructDefinition), NULL);
    LexInitParser(&amp;Parser, StructDefinition, Tokens, IntrinsicName, TRUE, FALSE);
    TypeParse(&amp;Parser, &amp;ParsedType, &amp;Identifier, &amp;IsStatic);
    HeapFree(Tokens);
}</pre><p>This code takes the structure definition in StructDefinition and runs the lexical analyser over it. This returns some lexical tokens. Then we initialise the parser and have it parse the type of the structure definition from the tokens we made. That&#x27;s enough to define the structure in the system. Finally we free the tokens. </p><p>Now let&#x27;s say we&#x27;re going to define a function to display a complex number. Our prototype will look like: </p><pre class="prettyprint">    { ShowComplex,   &quot;void ShowComplex(struct complex *)&quot; },</pre><p>And finally we can define the library function: </p><pre class="prettyprint">struct complex { int i; int j; };  /* make this C declaration match the picoc one */

void ShowComplex(struct ParseState *Parser, struct Value *ReturnValue, struct Value **Param, int NumArgs)
{
    struct complex *ComplexVal = Param[0]-&gt;Val-&gt;NativePointer;  /* casts the pointer */
        
    /* print the result */
    PrintInt(ComplexVal-&gt;i, PlatformPutc);
    PlatformPutc(&#x27;,&#x27;);
    PrintInt(ComplexVal-&gt;j, PlatformPutc);
}</pre><p>Unions work exactly the same way as structures. Define the prototype as &quot;union&quot; rather than &quot;struct&quot; and you&#x27;re away. </p><h1><a name="Returning_values"></a>Returning values<a href="#Returning_values" class="section_anchor"></a></h1><p>Returning values from library functions is very much like accessing parameters. The type of return values is already set before your native C function is called so all you have to do is fill in the value. </p><p>Just as with parameters, ints, chars and enums are stored in ReturnValue-&gt;Val-&gt;Integer and floating point values are returned in ReturnValue-&gt;Val-&gt;FP. </p><h2><a name="Returning_pointers"></a>Returning pointers<a href="#Returning_pointers" class="section_anchor"></a></h2><p>Returning a pointer to a static string or some other allocated data is easy. Your return code will look something like: </p><pre class="prettyprint">    ReturnValue-&gt;Val-&gt;NativePointer = &quot;hello&quot;;</pre><h1><a name="Variable_numbers_of_parameters"></a>Variable numbers of parameters<a href="#Variable_numbers_of_parameters" class="section_anchor"></a></h1><p>You can define your own stdarg-style library functions like printf(). Your function prototype should use &quot;...&quot; in the parameter list to indicate the potential extra parameters just like the standard stdarg system. Here&#x27;s an example from clibrary.c: </p><pre class="prettyprint">    { LibPrintf,        &quot;void printf(char *, ...)&quot; },</pre><p>The NumArgs parameter to the native C function lets you know how many parameters were passed in. You access the variable parameters just like normal parameters using the Param<tt>[]</tt> array. </p><p>Take a look at <strong>clibrary.c</strong> for the full definition of LibPrintf() if you need a more complete example. </p><h1><a name="Sharing_native_values_with_picoc"></a>Sharing native values with picoc<a href="#Sharing_native_values_with_picoc" class="section_anchor"></a></h1><p>Sometimes you have native variables you&#x27;d like to share with picoc. We can define a picoc value which shares memory with a native variable. Then we store this variable in the picoc symbol table so your programs can find it by name. There&#x27;s an easy way to do this: </p><pre class="prettyprint">int RobotIsExploding = 0;

void PlatformLibraryInit()
{
    VariableDefinePlatformVar(NULL, &quot;RobotIsExploding&quot;, &amp;IntType, (union AnyValue *)&amp;RobotIsExploding, FALSE);
}</pre><p>The variable RobotIsExploding can be written by your native C program and read by picoc just like any other picoc variable. In this case it&#x27;s protected from being written by the last parameter &quot;IsWritable&quot; being set to FALSE. Set it to TRUE and picoc will be able to write it too. </p>
 </div>
 </div>
 </td><tr>
</table>
 </div>


 
 <div id="wikicommentcol">
 


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

<div class="collapse">


 


<div id="commentlist">

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/106937832361521123309/">lauren...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Thu Jun  3 14:05:10 2010">Jun 3, 2010</span>
 <div>
<div class="commentcontent">
<p>I want to use a complex C++ object in the interpreter. I&#x27;d like the type to be &quot;abstract&quot; for the user, i.e. I prefer not to give the full definition to picoc. </p><p>If I use: const char <strong>StructDefinition<a href="/p/picoc/w/edit/StructDefinition">?</a> = &quot;struct complex;&quot;; </strong></p><p>Then it doesn&#x27;t work. Giving a fake definition seems to be OK: const char <strong>StructDefinition<a href="/p/picoc/w/edit/StructDefinition">?</a> = &quot;struct complex { int foo; }&quot;; </strong></p><p>I&#x27;d like to know if giving a fake definition is really safe. Does picoc need to know the real size of the object? </p><p>Thanks! Laurent </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/100016410873723497329/">cube2kil...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Thu Mar  3 23:26:58 2011">Mar 3, 2011</span>
 <div>
<div class="commentcontent">
<p>I wrote a nice macro system to make the function creation much saner to use it&#x27;s farily typesafe: <a href="http://pastebin.com/Fp3LAuAi" rel="nofollow">http://pastebin.com/Fp3LAuAi</a> </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/faboster/">faboster</a
>,
 
 </span>
 <span class="date" title="Wed May  4 11:22:11 2011">May 4, 2011</span>
 <div>
<div class="commentcontent">
<p>Hey thanks, this new wiki is nicer to understand : ) </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/103450418883340233978/">gregory....@gmail.com</a
>,
 
 </span>
 <span class="date" title="Tue Jul 12 15:16:34 2011">Jul 12, 2011</span>
 <div>
<div class="commentcontent">
<p>Does picoc support nested struct definition? Such as: </p><pre class="prettyprint">struct mg_request_info {
  void *user_data;       // User-defined pointer passed to mg_start()
  char *request_method;  // &quot;GET&quot;, &quot;POST&quot;, etc
  char *uri;             // URL-decoded URI
  char *http_version;    // E.g. &quot;1.0&quot;, &quot;1.1&quot;
  char *query_string;    // \0 - terminated
  char *remote_user;     // Authenticated user
  char *log_message;     // Mongoose error log message
  long remote_ip;        // Client&#x27;s IP address
  int remote_port;       // Client&#x27;s port
  int status_code;       // HTTP reply status code
  int is_ssl;            // 1 if SSL-ed, 0 if not
  int num_headers;       // Number of headers
  struct mg_header {
    char *name;          // HTTP header name
    char *value;         // HTTP header value
  } http_headers[64];    // Maximum 64 headers
};</pre>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/102110800652412353868/">angl...@mail.com</a
>,
 
 </span>
 <span class="date" title="Thu Oct  6 06:03:59 2011">Oct 6, 2011</span>
 <div>
<div class="commentcontent">
<p>How to call script&#x27;s function in c/c++ projects?  example:  t.cpp  main(){int n=foo(1,2);...} t.c(script) int foo(int x,int y){...} </p>
</div>
 
 
 </div>
 </div>
 

 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/111542006338374605170/">go2net...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Fri May 31 00:34:37 2013">May 31, 2013</span>
 <div>
<div class="commentcontent">
<p>I want to create function that have &quot;Variable numbers of parameters&quot; in script (not a Intrinsic function, that can be implemented according to above wiki), such as: </p><p>int UserDefinedPrintf<a href="/p/picoc/w/edit/UserDefinedPrintf">?</a>(char<strong> fmt,...) { <blockquote>... 
</blockquote>}  </strong></p><p>if this function defeined as Intrinsic function, it is easy, but if I want to define it in script, how can I do? </p><p>I searched the picoc source code, in stdio.c file, there have some Intrinsic  function which has va_list, for example: </p><blockquote>{ StdioVsprintf<a href="/p/picoc/w/edit/StdioVsprintf">?</a>,&quot;int vsprintf(char <strong>, char </strong>, va_list);&quot; }, 
</blockquote><p>but I do not know how to use it, since va_list parameter here is not same as native c, it is a Opaque Struct /<strong> handy structure definitions </strong>/ const char StdioDefs<a href="/p/picoc/w/edit/StdioDefs">?</a><a href=""></a> = &quot;\ typedef struct <i></i>va_listStruct va_list; \ typedef struct <i></i>FILEStruct FILE;\ &quot;; </p><blockquote>/<strong> make a &quot;struct <i></i>va_listStruct&quot; which is the same size as our struct StdVararg<a href="/p/picoc/w/edit/StdVararg">?</a> </strong>/ 
TypeCreateOpaqueStruct<a href="/p/picoc/w/edit/TypeCreateOpaqueStruct">?</a>(pc, NULL, TableStrRegister<a href="/p/picoc/w/edit/TableStrRegister">?</a>(pc, &quot;<i></i>va_listStruct&quot;), sizeof(FILE)); 
</blockquote><p>  </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/100776738437057518461/">johnoliv...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Mon Nov  4 15:04:35 2013">Nov 4, 2013</span>
 <div>
<div class="commentcontent">
<p>Does the picoc api allow me to use VariableDefinePlatformVar<a href="/p/picoc/w/edit/VariableDefinePlatformVar">?</a> to define a LongType<a href="/p/picoc/w/edit/LongType">?</a>?  LongType<a href="/p/picoc/w/edit/LongType">?</a> is not declared in interpreter.h, but it is defined in type.c. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/115928915869478348490/">scofferi...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Fri Mar  6 00:00:12 2015">Mar 6, 2015</span>
 <div>
<div class="commentcontent">
<p>How do I pass structure to a library function? </p><p>Example:  </p><pre class="prettyprint">const char *Foo_Defs = &quot;typedef struct { int i; int j } complex_t;&quot;;

struct LibraryFunction Foo_Functions[] = {
    { Foo_ComplexSum, &quot;complex_t ComplexSum( complex_t v1, complex_t v2 );&quot; },
    { NULL, NULL }
};

void Foo_SetupFunc(void) {
    const char IntrinsicName = TableStrRegister(&quot;c library&quot;);
    PicocParse(IntrinsicName, Foo_Defs, strlen(Foo_Defs), TRUE, TRUE, FALSE);
}

void Foo_ComplexSum(struct ParseState *Parser, struct Value *ReturnValue, struct Value **Param, int NumArgs) {

    /* This is not working, clearly the structure is not an integer */
    ReturnValue-&gt;Val-&gt;Integer = ComplexSum(Param0-&gt;Val-&gt;Integer, /* v1 */ Param1-&gt;Val-&gt;Integer /* v2 */ );
}

...
complex_t ComplexSum( complex_t v1, complex_t v2 ) {
    ...
}
</pre>
</div>
 
 
 </div>
 </div>
 

</div>
</div>

 


 <script type="text/javascript">
 function delComment(sequence_num, create_time, delete_mode) {
 var f = document.forms["delcom"];
 f.sequence_num.value = sequence_num;
 f.create_time.value = create_time;
 f.mode.value = delete_mode;
 f.submit();
 return false;
 }
 </script>


 </div>
 
 
 
 
 
 <div id="commentform">
 <form action="../w/detail.do" method="post">
 <table>
 <tr><td class="vt">
 <input type="hidden" name="pagename" value="Adding_native_C_library_functions" >
 <input type="hidden" name="token" value="ABZ6GAefUPI7sTx9MnPjHjqyk6-n_x2YaQ:1439298647272" >
 <div class="graytext" style="float: right;">
 Hint: You can use <a href="http://code.google.com/p/support/wiki/WikiSyntax">Wiki Syntax.</a>
 </div>
 <div>Enter a comment:</div>
 <textarea name="content" rows="6" cols="100"></textarea><br><br>
 <input type="submit" name="submit" value="Submit" >
 </td>
 </table>
 </form>
 </div>
 
 
 
 
 
 <form name="delcom" action="../w/delComment.do" method="POST">
 <input type="hidden" name="sequence_num" value="" >
 <input type="hidden" name="create_time" value="" >
 <input type="hidden" name="mode" value="" >
 <input type="hidden" name="pagename" value="Adding_native_C_library_functions" >
 <input type="hidden" name="token" value="ABZ6GAefUPI7sTx9MnPjHjqyk6-n_x2YaQ:1439298647272" >
 </form>


 <script src="https://ssl.gstatic.com/codesite/ph/9967404889048465354/js/prettify/prettify.js"></script>
 <script type="text/javascript">
 prettyPrint();
 </script>

<script type="text/javascript" src="https://ssl.gstatic.com/codesite/ph/9967404889048465354/js/dit_scripts.js"></script>



  
 
 
 <script type="text/javascript" src="https://ssl.gstatic.com/codesite/ph/9967404889048465354/js/ph_core.js"></script>
 
 <script type="text/javascript" src="https://ssl.gstatic.com/codesite/ph/9967404889048465354/js/ph_dwiki.js"></script>
 
 
 
 
</div> 

<div id="footer" dir="ltr">
 <div class="text">
 <a href="/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="/p/support/">Project Hosting Help</a>
 </div>
</div>
 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>

 
 


 
 </body>
</html>


